import React, { useContext, useEffect, useState } from 'react'
import { Item, Loader } from '../../global/components'
import { DirectoryContext } from '../../global/context'
import { ItemType } from '../../global/enums'
import { IDirectory, IPayload } from '../../global/interfaces'
import { BinService, PayloadService } from '../../global/services'
import { CreditsFooter, HomeHeader, ItemsContainer } from './components'
import './styles.scss'

const binService = new BinService(), payloadService = new PayloadService()

const Home = () => {
    const { directoryMap } = useContext(DirectoryContext)
    const [currentDirectory, setCurrentDirectory] = useState<IDirectory | null>(null)
    const [loading, setLoading] = useState<boolean>(false)

    useEffect(() => {
        window.addEventListener(window.henLoadingEventString, onHenLoading)
        window.addEventListener(window.henLoadedEventString, onHenLoaded)

        return () => {
            window.removeEventListener(window.henLoadingEventString, onHenLoading)
            window.removeEventListener(window.henLoadedEventString, onHenLoaded)
        }
    }, [])

    useEffect(() => {
        let mounted = true

        if (directoryMap && !currentDirectory) {
            const rootDir = directoryMap.get(0)

            if (!rootDir) {
                throw new Error("Failed to retrieve root directory")
            }

            if (rootDir && mounted) {
                setCurrentDirectory(rootDir)
            }
        }

        return () => {
            mounted = false
        }
    }, [directoryMap, currentDirectory])

    const onHenLoading = () => {
        setLoading(true)
    }

    const onHenLoaded = () => {
        setLoading(false)
    }

    const onPayloadSelected = async (payload: IPayload) => {
        if (!currentDirectory) {
            throw new Error("Current directory not specified")
        }

        const binFilePath = `${currentDirectory.path}/${payload.fullName}`
        const binFile = await binService.getBIN(binFilePath)
        if (binFile) {
            if (payload.isHen) {
                window.HEN = binFile
                window.loadPoc()
            } else {
                payloadService.loadViaGoldHen(binFile)
            }
        } else {
            throw new Error(`Failed to fetch BIN file at: ${binFilePath}`)
        }
    }

    const onDirectorySwitch = (directoryId: number | null) => {
        if (!directoryMap) {
            throw new Error("Directory map not specified")
        }

        if (directoryId === null) {
            throw new Error("Invalid directory specified")
        }

        const dir = directoryMap.get(directoryId)
        if (dir) {
            setCurrentDirectory(dir)
        } else {
            throw new Error(`Could not get directory ${directoryId}`)
        }
    }

    if (!currentDirectory) {
        return null
    }

    return (
        <>
            {loading && <Loader />}
            <div className="home">
                <HomeHeader />
                <ItemsContainer currentDirectory={currentDirectory}>
                    {currentDirectory.parent !== null &&
                        <Item
                            key={`up-one-level-${currentDirectory.parent}`}
                            text="..."
                            title="Visit parent directory"
                            itemType={ItemType.Directory}
                            onClick={() => onDirectorySwitch(currentDirectory.parent)}
                        />
                    }
                    {directoryMap
                        && currentDirectory.directoryIds
                        && currentDirectory.directoryIds.map(directoryId => {
                            const directory = directoryMap.get(directoryId)

                            if (!directory) {
                                return null
                            }

                            return (
                                <Item
                                    key={`directory-${directory.name}`}
                                    text={directory.name}
                                    title={`Enters the directory "${directory.name}"`}
                                    itemType={ItemType.Directory}
                                    onClick={() => onDirectorySwitch(directory.id)}
                                />)
                        })}
                    {currentDirectory.payloads.map(payload => {
                        return (
                            <Item
                                key={payload.fullName}
                                text={payload.name}
                                title={`Sends the ${payload.fullName} payload`}
                                itemType={ItemType.Payload}
                                color={payload.color}
                                onClick={() => onPayloadSelected(payload)}
                            />)
                    })}
                </ItemsContainer>
                <CreditsFooter />
            </div>
        </>)
}

export default Home