import React, { useContext, useEffect, useState } from 'react'
import { Item } from '../../global/components'
import { DirectoryContext } from '../../global/context'
import { ItemType } from '../../global/enums'
import { IDirectory, IPayload } from '../../global/interfaces'
import { BinService, PayloadService } from '../../global/services'
import { CreditsFooter, HomeHeader, ItemsContainer } from './components'

const binService = new BinService(), payloadService = new PayloadService()

const Home = () => {
    const { directoryMap } = useContext(DirectoryContext)
    const [currentDirectory, setCurrentDirectory] = useState<IDirectory | null>(null)

    useEffect(() => {
        if (directoryMap && !currentDirectory) {
            const rootDir = directoryMap.get(0)
            if (rootDir) {
                setCurrentDirectory(rootDir)
            }
        }

    }, [directoryMap, currentDirectory])

    const onExploitSelected = async () => {
        const binFile = await binService.getBIN("hen/Gold Hen 2b.bin")
        if (binFile) {
            window.PLS = binFile
            window.loadPoc()
        }
    }

    const onPayloadSelected = async (payload: IPayload) => {
        if (!currentDirectory) {
            return
        }

        const binFile = await binService.getBIN(`${currentDirectory.path}/${payload.path}`)
        if (binFile) {
            payloadService.loadViaGoldHen(binFile)
        }
    }

    const onDirectorySwitch = (directoryId: number | null) => {
        if (directoryId === null || !directoryMap) {
            return
        }

        const dir = directoryMap.get(directoryId)
        if (dir) {
            setCurrentDirectory(dir)
        }
    }

    if (!currentDirectory) {
        return null
    }

    return (
        <div className="home">
            <HomeHeader onExploitSelected={onExploitSelected} />
            <ItemsContainer currentDirectory={currentDirectory}>
                {currentDirectory.parent !== null &&
                    <Item
                        key={`up-one-level-${currentDirectory.parent}`}
                        text="..."
                        title="Visit parent directory"
                        itemType={ItemType.ParentDirectory}
                        onClick={() => onDirectorySwitch(currentDirectory.parent)}
                    />
                }
                {currentDirectory.directories.map(directory => {
                    return (
                        <Item
                            key={`directory-${directory.name}`}
                            text={directory.name}
                            title={`Enters the directory "${directory.name}"`}
                            itemType={ItemType.Directory}
                            onClick={() => onDirectorySwitch(directory.id)}
                        />)
                })}
                {currentDirectory.payloads.map(payload => {
                    return (
                        <Item
                            key={payload.path}
                            text={payload.name}
                            title={`Sends the ${payload.path} payload`}
                            itemType={ItemType.Payload}
                            color={payload.color}
                            onClick={() => onPayloadSelected(payload)}
                        />)
                })}
            </ItemsContainer>
            <CreditsFooter />
        </div>)
}

export default Home