import { HttpStatusCode } from "../enums";
import { isSuccessStatusCode } from "../helpers";
import { IModalInfo } from "../interfaces";

interface IBinService {
    getBINFile: (
        path: string,
        addModalCallback?: (modalInfo: IModalInfo) => void
    ) => Promise<Uint8Array | null>
    getBINFileWithCallback: (
        path: string,
        onSuccessCallback: (buffer: Uint8Array) => void,
        addModalCallback?: (modalInfo: IModalInfo) => void
    ) => void
}

class BinService implements IBinService {
    getBINFile = (
        path: string,
        addModalCallback?: (modalInfo: IModalInfo) => void
    ): Promise<Uint8Array | null> => {
        return new Promise<Uint8Array | null>((resolve) => {
            fetch(path, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/octet-stream'
                }
            }).then(res => {
                if (!isSuccessStatusCode(res.status) && res.status !== HttpStatusCode.Status304NotModified) {
                    if (addModalCallback) {
                        addModalCallback({
                            title: "BIN File Error",
                            message: `Failed to obtain the BIN file at: ${path}, reason: ${res.statusText}`
                        })
                    }
                    resolve(null)
                } else {
                    res.arrayBuffer().then(arrBuffer => resolve(new Uint8Array(arrBuffer)))
                }
            })
        })
    }

    getBINFileWithCallback = (
        path: string,
        onSuccessCallback: (buffer: Uint8Array) => void,
        addModalCallback?: (modalInfo: IModalInfo) => void
    ) => {
        var xhr = new XMLHttpRequest()
        xhr.open('GET', path)
        xhr.send()
        xhr.responseType = "arraybuffer"
        xhr.onload = function () {
            if ((isSuccessStatusCode(xhr.status) || xhr.status === HttpStatusCode.Status304NotModified) && xhr.response) {
                onSuccessCallback(xhr.response)
            } else if (addModalCallback) {
                addModalCallback({
                    title: "BIN Error",
                    message: `Failed to retrieve BIN file: ${xhr.status}`
                })
            }
        }

        xhr.onerror = function () {
            if (addModalCallback) {
                addModalCallback({
                    title: "BIN Error",
                    message: `Failed to retrieve BIN file: ${xhr.status}`
                })
            }
        }
    }
}

export default BinService