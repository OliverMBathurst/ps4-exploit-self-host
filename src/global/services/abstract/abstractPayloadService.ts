import { ModalType } from "../../enums"
import { IModalInfo } from "../../interfaces"

interface IAbstractPayloadService {
    postBINLoaderPayload: (
        binLoaderStatusEndpoint: string,
        binLoaderEndpoint: string,
        payload: ArrayBuffer) => Promise<IModalInfo | null>
}

abstract class AbstractPayloadService implements IAbstractPayloadService {
    postBINLoaderPayload = async (
        binLoaderStatusEndpoint: string,
        binLoaderEndpoint: string,
        payload: ArrayBuffer
    ): Promise<IModalInfo | null> => {
        return new Promise<IModalInfo | null>((resolve) => {
            var endpointStatusXhr = new XMLHttpRequest()
            endpointStatusXhr.open("POST", binLoaderStatusEndpoint)
            endpointStatusXhr.send()
            endpointStatusXhr.onerror = function () {
                resolve({
                    title: "BinLoader Error",
                    message: "Please enable BinLoader."
                })
            }

            endpointStatusXhr.onload = function () {
                if (JSON.parse(endpointStatusXhr.responseText).status === "ready") {
                    var xhr = new XMLHttpRequest();
                    xhr.open("POST", binLoaderEndpoint, true);
                    xhr.send(payload);

                    resolve({
                        title: "BinLoader",
                        message: "Sent payload.",
                        type: ModalType.FadeOut
                    })
                }
                else {
                    resolve({
                        title: "BinLoader Error",
                        message: "BinLoader is busy."
                    })
                }
            }
        })
    }
}

export default AbstractPayloadService