
interface IAbstractPayloadService {
    postBINLoaderPayload: (
        binLoaderStatusEndpoint: string,
        binLoaderEndpoint: string,
        payload: ArrayBuffer) => void
}

abstract class AbstractPayloadService implements IAbstractPayloadService {
    postBINLoaderPayload = async (
        binLoaderStatusEndpoint: string,
        binLoaderEndpoint: string,
        payload: ArrayBuffer
    ) => {
        var endpointStatusXhr = new XMLHttpRequest()
        endpointStatusXhr.open("POST", binLoaderStatusEndpoint)
        endpointStatusXhr.send()
        endpointStatusXhr.onerror = function () {
            alert("Load Error , first Enable binloader server from Setting GoldHEN");
        }

        endpointStatusXhr.onload = function () {
            if (JSON.parse(endpointStatusXhr.responseText).status === "ready") {
                var xhr = new XMLHttpRequest();
                xhr.open("POST", binLoaderEndpoint, true);
                xhr.send(payload);
            }
            else {
                alert("Cannot Load Payload Because binloader Server Is Busy")
            }
        }
    }
}

export default AbstractPayloadService