import NinePointZeroZeroManifest from '../../manifests/manifest_900.json';
import RootManifest from '../../manifests/manifest_root.json';
import { FirmwareVersion } from '../enums';
import { toMap } from '../helpers';
import { IDirectory } from '../interfaces';
import { ISerialisableManifest } from '../interfaces/manifest/interfaces';

interface IManifestService {
    getCacheFromLocalStorage: () => Map<FirmwareVersion, Map<number, IDirectory>> | null
    cacheAllManifests: () => Map<FirmwareVersion, Map<number, IDirectory>>
    clearAllCachedManifests: () => void
}

const storageKey: string = "manifests"

class ManifestService implements IManifestService {

    getCacheFromLocalStorage = (): Map<FirmwareVersion, Map<number, IDirectory>> | null => {
        const storedManifests = localStorage.getItem(storageKey)
        if (storedManifests) {
            const parsedManifests: Map<FirmwareVersion, string> = JSON.parse(storedManifests)
            const map = new Map<FirmwareVersion, Map<number, IDirectory>>()
            for (var parsed of parsedManifests) {
                const innerMap: [number, IDirectory] = JSON.parse(parsed[1])
                map.set(parsed[0], toMap(innerMap, m => m[0], m => m[1]))
            }

            return map
        }

        return null
    }

    clearAllCachedManifests = () => localStorage.removeItem(storageKey)

    cacheAllManifests = (): Map<FirmwareVersion, Map<number, IDirectory>> => {
        const manifests: ISerialisableManifest[] = [
            {
                firmwareVersion: FirmwareVersion.Undefined,
                directoryMap: this.manifestToMap(RootManifest)
            },
            {
                firmwareVersion: FirmwareVersion.NinePointZeroZero,
                directoryMap: this.manifestToMap(NinePointZeroZeroManifest)
            }
        ]

        const map: Map<FirmwareVersion, string> = toMap(
            manifests,
            manifest => manifest.firmwareVersion,
            manifest => JSON.stringify(Array.from(manifest.directoryMap.entries())))

        localStorage.setItem(storageKey, JSON.stringify(Array.from(map.entries())))

        return toMap(manifests, manifest => manifest.firmwareVersion, manifest => manifest.directoryMap)
    }

    getDirectoryMapByFirmwareVersion = (firmwareVersion: FirmwareVersion): Map<number, IDirectory> | null => {
        let dirs: IDirectory[] | null = null

        switch (firmwareVersion) {
            case FirmwareVersion.NinePointZeroZero:
                dirs = NinePointZeroZeroManifest
                break
            case FirmwareVersion.Undefined:
            default:
                dirs = RootManifest
        }

        return dirs
            ? this.manifestToMap(dirs)
            : null
    }

    private manifestToMap = (dirs: IDirectory[]): Map<number, IDirectory> => toMap(dirs, dir => dir.id, dir => dir)
}

export default ManifestService