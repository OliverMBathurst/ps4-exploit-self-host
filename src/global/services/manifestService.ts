import NinePointZeroZeroManifest from '../../manifests/manifest_900.json';
import RootManifest from '../../manifests/manifest_root.json';
import { MANIFESTS_OBJECT_STORE_NAME } from '../constants';
import { FirmwareVersion } from '../enums';
import { toMap } from '../helpers';
import { ICacheService, IDirectory } from '../interfaces';
import { ISerialisableManifest } from '../interfaces/manifest/interfaces';
import { AbstractCacheService } from './abstract';

interface IManifestService {
    cacheAllDirectoryMappings: () => Promise<void>
    getDirectoryMap: (firmwareVersion: FirmwareVersion) => Promise<Map<number, IDirectory> | null>
}

class ManifestService
    extends AbstractCacheService<Map<number, IDirectory>>
    implements IManifestService, ICacheService<Map<FirmwareVersion, Map<number, IDirectory>> | null>
{
    constructor() {
        super(MANIFESTS_OBJECT_STORE_NAME)
    }

    cacheAllDirectoryMappings = async (): Promise<void> => {
        const manifests: ISerialisableManifest[] = [
            {
                firmwareVersion: FirmwareVersion.Undefined,
                directoryMap: toMap(RootManifest, dir => dir.id, dir => dir)
            },
            {
                firmwareVersion: FirmwareVersion.NinePointZeroZero,
                directoryMap: toMap(NinePointZeroZeroManifest, dir => dir.id, dir => dir)
            }
        ]

        for (var manifestDeclaration of manifests) {
            const { firmwareVersion, directoryMap } = manifestDeclaration
            await this.addToObjectStore(firmwareVersion, directoryMap)
        }
    }

    getDirectoryMap = async (firmwareVersion: FirmwareVersion, useCache: boolean = true): Promise<Map<number, IDirectory> | null> => {
        return new Promise<Map<number, IDirectory> | null>(resolve => {
            if (!useCache) {
                resolve(this.getDirectoryMapByFirmwareVersion(firmwareVersion))
            } else {
                this.performCacheLookup(firmwareVersion).then(val => {
                    resolve(val.data
                        ? val.data
                        : this.getDirectoryMapByFirmwareVersion(firmwareVersion))
                })
            }
        })
    }

    private getDirectoryMapByFirmwareVersion = (firmwareVersion: FirmwareVersion): Map<number, IDirectory> | null => {
        let dirs: IDirectory[] | null = null

        switch (firmwareVersion) {
            case FirmwareVersion.NinePointZeroZero:
                dirs = NinePointZeroZeroManifest
                break
            case FirmwareVersion.Undefined:
            default:
                dirs = RootManifest
        }

        return dirs
            ? toMap(dirs, dir => dir.id, dir => dir)
            : null
    }
}

export default ManifestService