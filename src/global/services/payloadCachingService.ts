import { PAYLOAD_OBJECT_STORE_NAME } from "../constants"
import { ICacheService } from "../interfaces"
import { AbstractCacheService } from "./abstract"

interface IPayloadCachingService {
    togglePayloadCacheInclusion: (identifier: string, buffer: Uint8Array) => Promise<boolean>
}

class PayloadCachingService
    extends AbstractCacheService<Uint8Array>
    implements IPayloadCachingService, ICacheService<Map<string, Uint8Array> | null>
{
    constructor() {
        super(PAYLOAD_OBJECT_STORE_NAME)
    }

    togglePayloadCacheInclusion = async (identifier: string, buffer: Uint8Array): Promise<boolean> => {
        const cacheResult = await this.getCacheKeys()

        if (!cacheResult.data) {
            return false
        }

        const exists = cacheResult.data && cacheResult.data.includes(identifier)
        if (exists) {
            await this.deleteFromCache(identifier)
        } else {
            await this.addToObjectStore(identifier, buffer)
        }

        return !exists
    }
}

export default PayloadCachingService