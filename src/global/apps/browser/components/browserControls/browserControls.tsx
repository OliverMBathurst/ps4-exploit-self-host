import React, { useContext } from 'react'
import { CacheContext, DirectoryContext, LoadingContext, ThemeContext } from '../../../../../global/context'
import './styles.scss'

const BrowserControls = () => {
    const {
        cacheDirectoryMappings,
        cacheDirectoryPayloads,
        clearCachedDirectoryMappings,
        directoryMappingsCached,
        payloadsCached,
        clearPayloadCache
    } = useContext(CacheContext)

    const { currentDirectory } = useContext(DirectoryContext)

    const { theme } = useContext(ThemeContext)

    const { setLoading } = useContext(LoadingContext)

    const clearPayloadCacheInternal = async () => {
        setLoading(true)
        await clearPayloadCache()
        setLoading(false)
    }

    return (
        <div className={`browser-controls--${theme.styleName}`}>
            <div className="browser-controls__header">
                <span className="browser-controls__header__text large-text">
                    Browser
                </span>
            </div>
            <div className="browser-controls__buttons">
                <button className="browser-controls__buttons__cache-directory-mappings clickable-item transparent-button" onClick={cacheDirectoryMappings}>
                    <span className="browser-controls__buttons__directory-mappings__text no-select medium-text">
                        {`${directoryMappingsCached ? "Re-cache" : "Cache"} Directory Mappings`}
                    </span>
                </button>
                <button className={`browser-controls__buttons__clear-directory-mappings-cache clickable-item medium-text ${directoryMappingsCached ? "transparent" : "disabled"}-button`} onClick={() => directoryMappingsCached && clearCachedDirectoryMappings()}>
                    <span className="browser-controls__buttons__clear-directory-mappings-cache__text no-select">
                        Clear Directory Mappings Cache
                    </span>
                </button>
                {currentDirectory && currentDirectory.payloads.length > 0 &&
                    <button className="browser-controls__buttons__cache-payloads clickable-item medium-text transparent-button" onClick={() => cacheDirectoryPayloads(currentDirectory)}>
                        <span className="browser-controls__buttons__cache-payloads__text">
                            Cache All Payloads in <b>{currentDirectory.name}</b>
                        </span>
                    </button>
                }
                <button className={`browser-controls__buttons__clear-payload-cache clickable-item medium-text ${payloadsCached ? "transparent" : "disabled"}-button`} onClick={() => payloadsCached && clearPayloadCacheInternal()}>
                    <span className="browser-controls__buttons__clear-payload-cache__text no-select">
                        Clear Payload Cache
                    </span>
                </button>
            </div>
        </div>)
}

export default BrowserControls