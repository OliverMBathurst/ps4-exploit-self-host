import React, { useContext, useMemo } from 'react';
import Switch from "react-switch";
import { CacheContext, DirectoryContext } from '../../../../../global/context';
import { FirmwareVersion, ItemType } from '../../../../../global/enums';
import { Item } from '../../../../components';
import './styles.scss';

const FileBrowser = () => {
    const {
        isCacheModeOn,
        setIsCacheModeOn,
        firmwareVersion
    } = useContext(CacheContext)

    const {
        currentDirectory,
        hasAboveLevel,
        onPayloadSelected,
        onDirectorySwitch,
        onUpOneLevel
    } = useContext(DirectoryContext)

    const { directoryMap } = useContext(CacheContext)

    const friendlyFirmwareVersionName = useMemo(() => {
        if (firmwareVersion === FirmwareVersion.NinePointZeroZero) {
            return "9.00"
        }

        return ""
    }, [firmwareVersion])

    if (!currentDirectory) {
        return null
    }

    return (
        <div className="file-browser">
            <span className="file-browser__header-text medium-text no-select">
                Listing contents of: <b>{currentDirectory.name}</b>
            </span>
            <div className="file-browser__switch-container">
                <label>
                    <span className="file-browser__switch-container__label medium-text no-select">
                        Cache Mode:
                    </span>
                    <Switch
                        className="file-browser__switch-container__switch"
                        onChange={setIsCacheModeOn}
                        checked={isCacheModeOn} />
                </label>
            </div>
            <span className="file-browser__sub-header-text small-text no-select">
                Selected Firmware Version: <b>{friendlyFirmwareVersionName}</b>
            </span>
            <div className="file-browser__browser">
                {hasAboveLevel &&
                    <Item
                        key={`up-one-level-${currentDirectory.parent}`}
                        text="..."
                        title="Visit parent directory"
                        itemType={ItemType.Directory}
                        onClick={onUpOneLevel}
                    />
                }
                {directoryMap
                    && currentDirectory.directoryIds
                    && currentDirectory.directoryIds.map(directoryId => {
                        const directory = directoryMap.get(directoryId)

                        if (!directory) {
                            return null
                        }

                        return (
                            <Item
                                key={`directory-${directory.name}`}
                                text={directory.name}
                                title={`Enters the directory "${directory.name}"`}
                                itemType={ItemType.Directory}
                                onClick={() => onDirectorySwitch(directory.id)}
                            />)
                    })}
                {currentDirectory.payloads.map(payload => {
                    return (
                        <Item
                            identifier={payload.fullName}
                            key={payload.fullName}
                            text={payload.name}
                            title={`Sends the ${payload.fullName} payload`}
                            itemType={ItemType.Payload}
                            color={payload.color}
                            onClick={() => onPayloadSelected(payload)}
                        />)
                })}
            </div>
        </div>)
}

export default FileBrowser