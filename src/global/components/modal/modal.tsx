import React, { memo, useContext, useEffect, useMemo } from 'react'
import { ThemeContext } from '../../context'
import { ModalType } from '../../enums'
import { IModalInfo } from '../../interfaces'
import './styles.scss'

interface IModalProps {
    modalInfo: IModalInfo
    onDismiss: () => void
}

const Modal = (props: IModalProps) => {
    const {
        modalInfo: {
            title,
            message,
            type = ModalType.Normal,
            hasDismissButton = true,
            dismissText
        },
        onDismiss
    } = props

    const { theme } = useContext(ThemeContext)

    const typeModifier = useMemo(() => {
        return type === ModalType.FadeOut ? "--fade-out" : ""
    }, [type])


    useEffect(() => {
        let mounted = true

        if (type === ModalType.FadeOut) {
            setTimeout(() => {
                if (mounted) {
                    onDismiss()
                }
            }, 2000)
        }

        return () => {
            mounted = false
        }
    }, [type, onDismiss])

    return (
        <div className={`modal--${theme.styleName}${typeModifier}`}>
            <span className="modal__title large-text no-select">
                {title}
            </span>
            <span className="modal__message medium-text no-select">
                {message}
            </span>
            {hasDismissButton &&
                (<button
                    className="modal__dismiss-button clickable-item medium-text"
                    onClick={onDismiss}>
                    {dismissText || "OK"}
                </button>)
            }
        </div>)
}

export default memo(Modal)