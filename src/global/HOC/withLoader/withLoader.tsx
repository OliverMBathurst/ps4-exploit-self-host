import React, { useContext, useEffect, useState } from 'react'
import { Loader } from '../../components'
import { LoadingContext } from '../../context'
import { ICustomLoadEvent } from '../../interfaces'

const withLoader = (Component: React.ComponentType) => {
    return () => {
        const { loading } = useContext(LoadingContext)
        const [message, setMessage] = useState<string>('')

        useEffect(() => {
            let mounted = true

            const customLoadHandler = (event: CustomEvent<ICustomLoadEvent>) => {
                if (mounted) {
                    setMessage(event.detail.data)
                }
            }

            window.addEventListener(
                window.CUSTOM_LOAD_EVENT,
                ((event: CustomEvent<ICustomLoadEvent>) => customLoadHandler(event)) as EventListener)

            return () => {
                mounted = false
                window.removeEventListener(
                    window.CUSTOM_LOAD_EVENT,
                    ((event: CustomEvent<ICustomLoadEvent>) => customLoadHandler(event)) as EventListener)
            }
        }, [])

        return (
            <>
                {loading && <Loader message={message} />}
                <Component />
            </>)
    }
}

export default withLoader