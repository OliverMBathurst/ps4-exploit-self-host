import React, { createContext, useEffect, useState } from 'react';
import config from '../../config.json';
import { toMap } from '../helpers';
import { IDirectory, IDirectoryTuple } from '../interfaces';

interface IDirContextProps {
    children: React.ReactNode
}

interface IDirectoryContext {
    directoryMap: Map<number, IDirectory> | null
}

export const DirectoryContext = createContext<IDirectoryContext>({ directoryMap: null })

const DirContext = (props: IDirContextProps) => {
    const { children } = props
    const [directoryMap, setDirectoryMap] = useState<Map<number, IDirectory> | null>(null)

    useEffect(() => {
        let mounted = true

        const tuples = getAllDirectoryTuples(config)
        if (mounted) {
            setDirectoryMap(toMap(tuples, tuple => tuple.id, tuple => tuple.directory))
        }

        return () => {
            mounted = false
        }
    }, [])

    const getAllDirectoryTuples = (directory: IDirectory): IDirectoryTuple[] => {
        let arr: IDirectoryTuple[] = [
            {
                id: directory.id,
                directory: directory
            }
        ]

        for (var dir of directory.directories) {
            arr = arr.concat(getAllDirectoryTuples(dir))
        }

        return arr
    }

    return (
        <DirectoryContext.Provider value={{ directoryMap: directoryMap }}>
            {children}
        </DirectoryContext.Provider>)
}

export default DirContext