import React, { createContext, useContext, useEffect, useState } from 'react'
import { CacheContext } from '.'
import { Themes } from '../constants'
import { ITheme } from '../interfaces'

interface IThemeContextComponentProps {
    children: React.ReactNode
}

interface IThemeContext {
    theme: ITheme
    onThemeChange: (theme: ITheme) => void
}

export const ThemeContext = createContext<IThemeContext>({
    theme: Themes[0],
    onThemeChange: (_: ITheme) => Function.prototype
})

const storageKey: string = "theme"

const ThemeContextComponent = (props: IThemeContextComponentProps) => {
    const { children } = props
    const [theme, setTheme] = useState<ITheme>(Themes[0])

    const { onLocalStorageSizeChanged } = useContext(CacheContext)

    useEffect(() => {
        const storedTheme = localStorage.getItem(storageKey)
        if (storedTheme) {
            const themes = Themes.filter(t => t.name === storedTheme)
            if (themes.length > 0) {
                setTheme(themes[0])
            }
        }
    }, [])

    const onThemeChangeInternal = (newTheme: ITheme) => {
        setTheme(newTheme)
        localStorage.setItem(storageKey, newTheme.name)
        onLocalStorageSizeChanged()
    }

    return (
        <ThemeContext.Provider value={{
            theme: theme,
            onThemeChange: onThemeChangeInternal
        }}>
            {children}
        </ThemeContext.Provider>)
}

export default ThemeContextComponent