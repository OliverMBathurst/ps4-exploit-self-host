import React, { createContext, useEffect, useState } from 'react'
import { Themes } from '../constants'
import { ITheme } from '../interfaces'

interface IThemeContextComponentProps {
    children: React.ReactNode
}

interface IThemeContext {
    theme: ITheme
    onThemeChange: (theme: ITheme) => void
}

export const ThemeContext = createContext<IThemeContext>({
    theme: Themes[0],
    onThemeChange: (_: ITheme) => Function.prototype
})

const storageKey: string = "theme"

const ThemeContextComponent = (props: IThemeContextComponentProps) => {
    const { children } = props
    const [theme, setTheme] = useState<ITheme>(Themes[0])

    useEffect(() => {
        const storedTheme = localStorage.getItem(storageKey)
        if (storedTheme !== null) {
            const themes = Themes.filter(t => t.name === storedTheme)
            if (themes.length > 0) {
                setTheme(themes[0])
            }
        }
    }, [])

    useEffect(() => {
        localStorage.setItem(storageKey, theme.name)
    }, [theme])

    return (
        <ThemeContext.Provider value={{
            theme: theme,
            onThemeChange: setTheme
        }}>
            {children}
        </ThemeContext.Provider>)
}

export default ThemeContextComponent