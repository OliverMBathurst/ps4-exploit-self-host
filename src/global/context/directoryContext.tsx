import React, { createContext, useContext, useEffect, useMemo, useState } from 'react';
import { BrowserContext, FirmwareVersionContext } from '.';
import { FirmwareVersion } from '../enums';
import { toMap } from '../helpers';
import { IDirectory, IPayload, IPayloadService } from '../interfaces';
import { BinService, ManifestService } from '../services';
import { NinePointZeroZeroPayloadService } from '../services/versioned/9.00';

interface IDirectoryContextComponentProps {
    children: React.ReactNode
}

interface IDirectoryContext {
    directoryMap: Map<number, IDirectory> | null
    currentDirectory: IDirectory | null
    hasAboveLevel: boolean
    onPayloadSelected: (payload: IPayload) => void
    onDirectorySwitch: (directoryId: number | null) => void
    onUpOneLevel: () => void
}

export const DirectoryContext = createContext<IDirectoryContext>({
    directoryMap: null,
    currentDirectory: null,
    hasAboveLevel: false,
    onPayloadSelected: (_: IPayload) => Function.prototype,
    onDirectorySwitch: (_: number | null) => Function.prototype,
    onUpOneLevel: () => Function.prototype
})

const binService = new BinService(), manifestService = new ManifestService()

const DirectoryContextComponent = (props: IDirectoryContextComponentProps) => {
    const { children } = props
    const { firmwareVersion, setFirmwareVersion } = useContext(FirmwareVersionContext)
    const { isSupportedBrowser } = useContext(BrowserContext)

    const [directoryMap, setDirectoryMap] = useState<Map<number, IDirectory> | null>(null)
    const [currentDirectory, setCurrentDirectory] = useState<IDirectory | null>(null)

    useEffect(() => {
        let mounted = true

        const newDirectories: IDirectory[] = manifestService.getManifestByFirmwareVersion(firmwareVersion)
        const dirMap = toMap(newDirectories, dir => dir.id, dir => dir)

        if (mounted) {
            setDirectoryMap(dirMap)

            const manifestRoot = dirMap.get(0)
            if (manifestRoot) {
                setCurrentDirectory(manifestRoot)
            } else {
                throw new Error("Failed to set manifest root")
            }
        }

        return () => {
            mounted = false
        }
    }, [firmwareVersion])

    const payloadService: IPayloadService | null = useMemo(() => {
        if (firmwareVersion === FirmwareVersion.NinePointZeroZero) {
            return new NinePointZeroZeroPayloadService()
        }

        return null
    }, [firmwareVersion])

    const onPayloadSelected = async (payload: IPayload) => {
        if (!isSupportedBrowser) {
            throw new Error("Unsupported browser")
        }

        if (!currentDirectory) {
            throw new Error("Current directory not specified")
        }

        if (!payloadService) {
            throw new Error("Could not find payload service")
        }

        const binFilePath = `${currentDirectory.path}/${payload.fullName}`
        const binFile = await binService.getBIN(binFilePath)
        if (binFile) {
            payloadService.handlePayload(payload, binFile)
        } else {
            throw new Error(`Failed to fetch BIN file at: ${binFilePath}`)
        }
    }

    const onDirectorySwitch = (directoryId: number | null) => {
        if (!directoryMap) {
            throw new Error("Directory map not specified")
        }

        if (directoryId === null) {
            throw new Error("Invalid directory specified")
        }

        const dir = directoryMap.get(directoryId)
        if (dir) {
            setCurrentDirectory(dir)

            if (dir.firmwareVersionBarrier) {
                setFirmwareVersion(dir.firmwareVersionBarrier)
            }
        } else {
            throw new Error(`Could not get directory ${directoryId}`)
        }
    }

    const onUpOneLevel = () => {
        if (!currentDirectory) {
            throw new Error("Current directory is undefined")
        }

        if (!directoryMap) {
            throw new Error("Directory map is undefined")
        }

        if (currentDirectory.parent !== null) {
            const parent = directoryMap.get(currentDirectory.parent)
            if (!parent) {
                throw new Error("Parent directory cannot be found")
            }

            setCurrentDirectory(parent)
        } else if (firmwareVersion !== FirmwareVersion.Undefined) {
            setFirmwareVersion(FirmwareVersion.Undefined)
        } else {
            throw new Error("Cannot navigate upwards")
        }
    }

    const hasAboveLevel = useMemo(() => {
        return firmwareVersion !== FirmwareVersion.Undefined
            || (currentDirectory !== null && currentDirectory.parent !== null)
    }, [firmwareVersion, currentDirectory])

    return (
        <DirectoryContext.Provider value={{
            directoryMap: directoryMap,
            currentDirectory: currentDirectory,
            hasAboveLevel: hasAboveLevel,
            onPayloadSelected: onPayloadSelected,
            onDirectorySwitch: onDirectorySwitch,
            onUpOneLevel: onUpOneLevel
        }}>
            {children}
        </DirectoryContext.Provider>)
}

export default DirectoryContextComponent