import React, { createContext, useContext, useEffect, useMemo, useState } from 'react';
import { BrowserContext, FirmwareVersionContext, LoadingContext, ModalContext } from '.';
import { FirmwareVersion, ModalType } from '../enums';
import { IDirectory, IPayload, IPayloadService } from '../interfaces';
import { BinService } from '../services';
import { NinePointZeroZeroPayloadService } from '../services/versioned/9.00';
import { ManifestContext } from './manifestContext';

interface IDirectoryContextComponentProps {
    children: React.ReactNode
}

interface IDirectoryContext {
    currentDirectory: IDirectory | null
    hasAboveLevel: boolean,
    onPayloadSelected: (payload: IPayload) => void
    onDirectorySwitch: (directoryId: number | null) => void
    onUpOneLevel: () => void

}

export const DirectoryContext = createContext<IDirectoryContext>({
    currentDirectory: null,
    hasAboveLevel: false,
    onPayloadSelected: (_: IPayload) => Function.prototype,
    onDirectorySwitch: (_: number | null) => Function.prototype,
    onUpOneLevel: () => Function.prototype
})

const binService = new BinService()

const DirectoryContextComponent = (props: IDirectoryContextComponentProps) => {
    const { children } = props

    const { firmwareVersion, setFirmwareVersion } = useContext(FirmwareVersionContext)
    const { isBrowserSupported } = useContext(BrowserContext)
    const { setLoading } = useContext(LoadingContext)
    const { addModal } = useContext(ModalContext)
    const { directoryMap } = useContext(ManifestContext)

    const [currentDirectory, setCurrentDirectory] = useState<IDirectory | null>(null)

    useEffect(() => {
        let mounted = true

        if (directoryMap) {
            const manifestRoot = directoryMap.get(0)
            if (manifestRoot && mounted) {
                setCurrentDirectory(manifestRoot)
            } else {
                throw new Error("Failed to set manifest root")
            }
        }

        return () => {
            mounted = false
        }
    }, [directoryMap])

    const payloadService: IPayloadService | null = useMemo(() => {
        if (firmwareVersion === FirmwareVersion.NinePointZeroZero) {
            return new NinePointZeroZeroPayloadService()
        }

        return null
    }, [firmwareVersion])

    const onPayloadSelected = async (payload: IPayload) => {
        setLoading(true)

        try {
            if (!isBrowserSupported) {
                addModal({
                    title: "Unsupported Browser",
                    message: "Unsupported browser",
                    type: ModalType.FadeOut,
                    hasDismissButton: false
                })
                return
            }

            if (!currentDirectory) {
                addModal({
                    title: "Directory Not Specified",
                    message: "Current directory not specified"
                })
                return
            }

            if (!payloadService) {
                addModal({
                    title: "Payload Service Error",
                    message: "Could not find payload service"
                })
                return
            }

            const binFilePath = `${currentDirectory.path}/${payload.fullName}`
            const binFile = await binService.getBIN(binFilePath)
            if (binFile) {
                payloadService.handlePayload(payload, binFile).then(response => {
                    alert(response.message)
                })
            } else {
                addModal({
                    title: "BIN Error",
                    message: `Failed to fetch BIN file at: ${binFilePath}`
                })
            }
        } catch (e) {
            console.error(e)
        } finally {
            setLoading(false)
        }
    }

    const onDirectorySwitch = (directoryId: number | null) => {
        if (!directoryMap) {
            addModal({
                title: "Directory Map Error",
                message: "Directory map not specified"
            })
            return
        }

        if (directoryId === null) {
            addModal({
                title: "Directory Error",
                message: "Invalid directory specified"
            })
            return
        }

        const dir = directoryMap.get(directoryId)
        if (dir) {
            setCurrentDirectory(dir)

            if (dir.firmwareVersionBarrier) {
                setFirmwareVersion(dir.firmwareVersionBarrier)
            }
        } else {
            addModal({
                title: "Directory Error",
                message: `Could not get directory ${directoryId}`
            })
        }
    }

    const onUpOneLevel = () => {
        if (!currentDirectory) {
            addModal({
                title: "Directory Error",
                message: "Current directory is undefined"
            })
            return
        }

        if (!directoryMap) {
            addModal({
                title: "Directory Error",
                message: "Directory map is undefined"
            })
            return
        }

        if (currentDirectory.parent !== null) {
            const parent = directoryMap.get(currentDirectory.parent)
            if (!parent) {
                addModal({
                    title: "Directory Error",
                    message: "Parent directory cannot be found"
                })
                return
            }

            setCurrentDirectory(parent)
        } else if (firmwareVersion !== FirmwareVersion.Undefined) {
            setFirmwareVersion(FirmwareVersion.Undefined)
        } else {
            addModal({
                title: "Directory Error",
                message: "Cannot navigate upwards"
            })
        }
    }

    const hasAboveLevel = useMemo(() => {
        return firmwareVersion !== FirmwareVersion.Undefined
            || (currentDirectory !== null && currentDirectory.parent !== null)
    }, [firmwareVersion, currentDirectory])

    return (
        <DirectoryContext.Provider value={{
            currentDirectory: currentDirectory,
            hasAboveLevel: hasAboveLevel,
            onPayloadSelected: onPayloadSelected,
            onDirectorySwitch: onDirectorySwitch,
            onUpOneLevel: onUpOneLevel
        }}>
            {children}
        </DirectoryContext.Provider>)
}

export default DirectoryContextComponent