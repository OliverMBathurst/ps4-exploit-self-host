import React, { createContext, useEffect, useState } from 'react';
import config from '../../manifest_900.json';
import { toMap } from '../helpers';
import { IDirectory, IPayload } from '../interfaces';
import { BinService, PayloadService } from '../services';

interface IDirectoryContextComponentProps {
    children: React.ReactNode
}

interface IDirectoryContext {
    directoryMap: Map<number, IDirectory> | null
    currentDirectory: IDirectory | null
    onPayloadSelected: (payload: IPayload) => void
    onDirectorySwitch: (directoryId: number | null) => void
}

export const DirectoryContext = createContext<IDirectoryContext>({
    directoryMap: null,
    currentDirectory: null,
    onPayloadSelected: (_: IPayload) => { },
    onDirectorySwitch: (_: number | null) => { }
})

const binService = new BinService(), payloadService = new PayloadService()

const DirectoryContextComponent = (props: IDirectoryContextComponentProps) => {
    const { children } = props
    const [directoryMap, setDirectoryMap] = useState<Map<number, IDirectory> | null>(null)
    const [currentDirectory, setCurrentDirectory] = useState<IDirectory | null>(null)

    useEffect(() => {
        let mounted = true

        const directories: IDirectory[] = config
        const map = toMap(directories, tuple => tuple.id, tuple => tuple)

        if (mounted) {
            setDirectoryMap(map)
        }

        return () => {
            mounted = false
        }
    }, [])

    useEffect(() => {
        let mounted = true

        if (directoryMap && !currentDirectory) {
            const rootDir = directoryMap.get(0)

            if (!rootDir) {
                throw new Error("Failed to retrieve root directory")
            }

            if (rootDir && mounted) {
                setCurrentDirectory(rootDir)
            }
        }

        return () => {
            mounted = false
        }
    }, [directoryMap, currentDirectory])

    const onPayloadSelected = async (payload: IPayload) => {
        if (!currentDirectory) {
            throw new Error("Current directory not specified")
        }

        const binFilePath = `${currentDirectory.path}/${payload.fullName}`
        const binFile = await binService.getBIN(binFilePath)
        if (binFile) {
            if (payload.isHen) {
                window.HEN = binFile
                window.POC()
            } else {
                payloadService.loadViaGoldHen(binFile)
            }
        } else {
            throw new Error(`Failed to fetch BIN file at: ${binFilePath}`)
        }
    }

    const onDirectorySwitch = (directoryId: number | null) => {
        if (!directoryMap) {
            throw new Error("Directory map not specified")
        }

        if (directoryId === null) {
            throw new Error("Invalid directory specified")
        }

        const dir = directoryMap.get(directoryId)
        if (dir) {
            setCurrentDirectory(dir)
        } else {
            throw new Error(`Could not get directory ${directoryId}`)
        }
    }

    return (
        <DirectoryContext.Provider value={{
            directoryMap: directoryMap,
            currentDirectory: currentDirectory,
            onPayloadSelected: onPayloadSelected,
            onDirectorySwitch: onDirectorySwitch
        }}>
            {children}
        </DirectoryContext.Provider>)
}

export default DirectoryContextComponent