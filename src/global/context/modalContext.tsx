import React, { createContext, useContext, useState } from 'react'
import { BrowserContext } from '.'
import { IModalInfo } from '../interfaces'

interface IModalContextComponentProps {
    children: React.ReactNode
}

interface IModalContext {
    modals: IModalInfo[]
    addModal: (modalInfo: IModalInfo) => void
    removeModal: (modalInfo: IModalInfo) => void
}

export const ModalContext = createContext<IModalContext>({
    modals: [],
    addModal: (_: IModalInfo) => Function.prototype,
    removeModal: (_: IModalInfo) => Function.prototype
})

const ModalContextComponent = (props: IModalContextComponentProps) => {
    const { children } = props
    const { isBrowserExploitable } = useContext(BrowserContext)
    const [modals, setModals] = useState<IModalInfo[]>([])

    const addModal = (modalInfo: IModalInfo) => {
        if (isBrowserExploitable) {
            return
        }

        modalInfo.id = `${modalInfo.title.replace(" ", "-")}--${Date.now().toString()}`
        setModals([...modals].concat(modalInfo))
    }

    const removeModal = (modalInfo: IModalInfo) => {
        setModals([...modals].filter(modal => modal.id !== modalInfo.id))
    }

    return (
        <ModalContext.Provider value={{
            modals: modals,
            addModal: addModal,
            removeModal: removeModal
        }}>
            {children}
        </ModalContext.Provider>)
}

export default ModalContextComponent